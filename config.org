* Minor Settings
** Subword
Traversing camelcase using meta key.
#+begin_src emacs-lisp
  (global-subword-mode 1)
#+end_src
** Electric Pair
Adding closing parenthesis and else automatically.
#+begin_src emacs-lisp
  (setq electric-pair-pairs '((?\( . ?\))
			      (?\[ . ?\])
			      (?\" . ?\")
			      ))

  (electric-pair-mode t)
#+end_src
** kill-whole-word
   #+begin_src emacs-lisp
     (defun kill-whole-word ()
       (interactive)
       (backward-word)
       (kill-word 1))
     (global-set-key (kbd "C-c w w") 'kill-whole-word)
   #+end_src
** Show line and column on the modeline
   #+begin_src emacs-lisp
     (line-number-mode 1)
     (column-number-mode 1)
   #+end_src
* Terminal
** Setting default shell to bash
   #+begin_src emacs-lisp
     (defvar my-term-shell "/bin/zsh")
     (defadvice ansi-term (before force-bash)
       (interactive (list my-term-shell)))
     (ad-activate 'ansi-term)

   #+end_src
** Setting global key to open =ansi-term=
   #+begin_src emacs-lisp
     (global-set-key (kbd "<s-return>") 'ansi-term)
   #+end_src

* Org
** Basic Config
Open ==C-c '== in the same window.
#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window)
#+end_src
** Org Bullets
   #+begin_src emacs-lisp
     (use-package org-bullets
       :ensure t
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
   #+end_src

* Hungry Delete
Delete all white space.
#+begin_src emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode))
#+end_src
* Markdown Mode
** Initialize markdown mode
   #+begin_src emacs-lisp
     (use-package markdown-mode
       :ensure t
       :mode (("README\\.md\\'" . gfm-mode)
	      ("\\.md\\'" . markdown-mode)
	      ("\\.markdown\\'" . markdown-mode))
       :init (setq markdown-command "multimarkdown"))

   #+end_src

* Moving around Emacs
** Which-Key
   #+begin_src emacs-lisp
     (use-package which-key
       :ensure t
       :init
       (which-key-mode))

   #+end_src

** Beacon
   #+begin_src emacs-lisp
     (use-package beacon
       :ensure t
       :init
       (beacon-mode 1))

   #+end_src

** Scroll conservatively
   #+begin_src emacs-lisp
     (setq scroll-conservatively 100)
   #+end_src

** Line highlight
   #+begin_src emacs-lisp
     (when window-system (global-hl-line-mode t))
   #+end_src

** Prettify symbols
   #+begin_src emacs-lisp
     (global-prettify-symbols-mode t)
   #+end_src
** y-or-no
   #+begin_src emacs-lisp
     (defalias 'yes-or-no-p 'y-or-n-p)
   #+end_src
** Inhibit startup message
   #+begin_src emacs-lisp
     (setq inhibit-startup-message t)
   #+end_src
* Emacs Functionality
** Backup file
   #+begin_src emacs-lisp
     (setq make-backup-file nil)
   #+end_src
** Auto save
   #+begin_src emacs-lisp
     (setq auto-save-default nil)
   #+end_src
* IDO
** Enable IDO mode
   #+begin_src emacs-lisp
     (setq ido-enable-flex-matching nil)
     (setq ido-create-new-buffer 'always)
     (setq ido-everywhere t)
     (ido-mode 1)
   #+end_src
** IDO Vertical
   #+begin_src emacs-lisp
     (use-package ido-vertical-mode
       :ensure t
       :init
       (ido-vertical-mode 1))
     (setq ido-vertical-define-keys 'C-n-and-C-p-only)
   #+end_src
** SMEX
   #+begin_src emacs-lisp
     (use-package smex
       :ensure t
       :init (smex-initialize)
       :bind
       ("M-x" . smex))
   #+end_src
** Switch buffer
   #+begin_src emacs-lisp
     (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
   #+end_src
* Buffers
** Always kill current buffer
   #+begin_src emacs-lisp
     (defun kill-current-buffer ()
       (interactive)
       (kill-buffer (current-buffer)))
     (global-set-key (kbd "C-x k") 'kill-current-buffer)
   #+end_src
** Enable ibuffer
   #+begin_src emacs-lisp
     (global-set-key (kbd "C-x b") 'ibuffer)
   #+end_src
* Avy
** Enable avy
   #+begin_src emacs-lisp
     (use-package avy
       :ensure t
       :bind
       ("M-s" . avy-goto-char))
   #+end_src
* Config edit/reload
Setting shortcuts for editing and reloading ==config.org==.
** Edit
   #+begin_src emacs-lisp
     (defun config-visit()
       (interactive)
       (find-file "~/.emacs.d/config.org"))
     (global-set-key (kbd "C-c e") 'config-visit)
   #+end_src
** Reload
   #+begin_src emacs-lisp
     (defun config-reload()
       (interactive)
       (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
     (global-set-key (kbd "C-c r") 'config-reload)
   #+end_src
* Rainbow
Setting background color of any hex color code.
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init (rainbow-mode 1))
#+end_src
* Switch-window
Package to switch window-efficiently.
#+begin_src emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "h" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))
#+end_src
* Window splitting function
Change cursor position when splitting window
#+begin_src emacs-lisp
  (defun split-and-follow-horizontally()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+end_src
