* Terminal
** Setting default shell to bash
   #+begin_src emacs-lisp
     (defvar my-term-shell "/bin/zsh")
     (defadvice ansi-term (before force-bash)
       (interactive (list my-term-shell)))
     (ad-activate 'ansi-term)

   #+end_src
** Setting global key to open =ansi-term=
   #+begin_src emacs-lisp
     (global-set-key (kbd "<s-return>") 'ansi-term)
   #+end_src

* Org
** Org Bullets
   #+begin_src emacs-lisp
     (use-package org-bullets
       :ensure t
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
   #+end_src

* Markdown Mode
** Initialize markdown mode
   #+begin_src emacs-lisp
     (use-package markdown-mode
       :ensure t
       :mode (("README\\.md\\'" . gfm-mode)
	      ("\\.md\\'" . markdown-mode)
	      ("\\.markdown\\'" . markdown-mode))
       :init (setq markdown-command "multimarkdown"))

   #+end_src

* Moving around Emacs
** Which-Key
   #+begin_src emacs-lisp
     (use-package which-key
       :ensure t
       :init
       (which-key-mode))

   #+end_src

** Beacon
   #+begin_src emacs-lisp
     (use-package beacon
       :ensure t
       :init
       (beacon-mode 1))

   #+end_src

** Scroll conservatively
   #+begin_src emacs-lisp
     (setq scroll-conservatively 100)
   #+end_src

** Hl-line mode
   #+begin_src emacs-lisp
     (when window-system (global-hl-line-mode t))
   #+end_src

** Prettify symbols
   #+begin_src emacs-lisp
     (global-prettify-symbols-mode t)
   #+end_src
** Yes-no keys
   #+begin_src emacs-lisp
     (defalias 'yes-or-no-p 'y-or-n-p)
   #+end_src
** Inhibit startup message
   #+begin_src emacs-lisp
     (setq inhibit-startup-message t)
   #+end_src
* Emacs Functionality
** Backup file
   #+begin_src emacs-lisp
     (setq make-backup-file nil)
   #+end_src
** Auto save
   #+begin_src emacs-lisp
     (setq auto-save-default nil)
   #+end_src
